#!/bin/bash
if [ "${DEBUG}" = "true" ]; then
  set -x
  set -e
fi

here="$(readlink -m $(dirname ${BASH_SOURCE[0]}))"
workspace=$(dirname ${here})
project_name=$(basename ${workspace})
image="${DEV_IMAGE:-archlinux:latest}"
dev_name="${DEV_NAME:-${project_name}-dev}"
user_id="${DEV_USER_ID:-$(id -ru)}"
user_name="${DEV_USER_NAME:-$(id -run)}"
group_id="${DEV_GROUP_ID:-$(id -rg)}"
group_name="${DEV_GROUP_NAME:-$(id -rgn)}"
app_dir="${APP_DIR:-/var/app}"
container_manager="${CONTAINER_MANAGER:-autodetect}"

declare -a allowed_container_manager=(
  "podman"
  "docker"
)

if [ "${container_manager}" = "autodetect" ]; then
  for c in "${allowed_container_manager[@]}"
  do
    if command -v "${c}" > /dev/null; then
      container_manager="${c}"
      break
    fi
  done
  if [ "${container_manager}" = "autodetect" ]; then
    echo "Cannot find any valid container managers"
    exit 1
  fi
else
  ! command -v "${container_manager}" > /dev/null && echo "${container_manager} is not executable" && exit 1
fi

function generate_container_file()
{
  cat << EOF > "Containerfile"
FROM archlinux:latest

ARG USER_ID
ARG USER_NAME
ARG GROUP_ID
ARG GROUP_NAME
ARG APP_DIR
ARG SHELL
ARG PS1_HEAD
RUN yes | pacman -Sy unzip sudo
RUN groupadd --gid \$GROUP_ID \$GROUP_NAME
RUN useradd \
  --gid \$GROUP_ID \
  --shell \$SHELL \
  --uid \$USER_ID \
  --create-home \
  $USER_NAME
RUN echo "\$USER_NAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers
RUN su \$USER_NAME -
RUN mkdir -p \$APP_DIR
RUN chown \$USER_NAME:\$GROUP_NAME \$APP_DIR
WORKDIR \$APP_DIR
RUN curl https://raw.githubusercontent.com/mtwtkman/mi/main/setup | sh -s
EOF
}

function build_container()
{
  eval "${container_manager} build \
    --rm \
    -t ${dev_name} \
    --build-arg APP_DIR="${app_dir}" \
    --build-arg USER_ID="${user_id}" \
    --build-arg USER_NAME="${user_name}" \
    --build-arg GROUP_ID="${group_id}" \
    --build-arg GROUP_NAME="${group_name}" \
    --build-arg SHELL="${SHELL}" \
    --build-arg PS1_HEAD="[${dev_name}]" \
    ${here}"
}

function run_container()
{
  eval "${container_manager} run \
    --tty \
    --interactive \
    --userns=keep-id \
    --volume="${workspace}":"${app_dir}"\
    --user="${user_name}" \
    --name="${dev_name}" \
    "${dev_name}" \
    bash"
}

function create_container()
{
  eval "${contaienr_manager} create \
    --userns=keep-id \
    --volume="${workspace}":"${app_dir}"\
    --user="${user_name}" \
    --name="${dev_name}" \
    "${dev_name}" \
    bash"
}

function enter_container()
{
  eval "${container_manager} start ${dev_name}"
  eval "${container_manager} exec \
    --tty \
    --interactive \
    --detach-keys= \
    "${dev_name}" \
    bash"
}

function kill_container()
{
  eval "${container_manager} stop "${dev_name}" > /dev/null"
  eval "${container_manager} rm "${dev_name}" > /dev/null"
}

function rmi()
{
  eval "${container_manager} rmi ${dev_name} > /dev/null"
}

function rebuild_image()
{
  kill_container
  rmi
  build_container
}

function usage()
{
  indent="  "
  echo "usage: devkit <command>"
  echo "These are some commands for manipulating your dev container depends on ${container_manager}"
  echo ""
  echo -e "${indent}init\t\t\tGenerate a Containerfile"
  echo -e "${indent}build\t\t\tCreate a dev container image named ${dev_name}"
  echo -e "${indent}run\t\t\tCreate and attach to a dev container named ${dev_name}"
  echo -e "${indent}create\t\tCreate a dev container named ${dev_name}"
  echo -e "${indent}enter\t\t\tAttach to created dev container"
  echo -e "${indent}rerun\t\t\tRerun a new dev container after removing created container"
  echo -e "${indent}kill | destroy\tRemove created dev container"
  echo -e "${indent}reboot\t\tRebuild a dev container image and run it"
}

cmd=$1
shift
case "${cmd}" in
  init) generate_container_file;;
  build) build_container;;
  run) run_container;;
  create) create_container;;
  enter) enter_container;;
  rerun)
    kill_container
    run_container
    ;;
  kill|destroy) kill_container;;
  cleanup) rmi;;
  rebuild) rebuild_image;;
  reboot)
    rebuild_image
    run_container
    ;;
  *)
    usage
    exit 0
    ;;
esac
